import React, { Component } from 'react';
import { connect } from 'react-redux';
import SearchBar from '../containers/search_bar';
import TableList from '../containers/table_list';
import Favicon from 'react-favicon';
import { meFromToken, meFromTokenSuccess, meFromTokenFailure, resetToken } from '../actions/auth';
import { NotificationContainer, NotificationManager } from 'react-notifications';


class App extends Component {
  componentWillMount() {
    this.props.loadUserFromToken();
  }
  render() {
    return (
      <div>
        <Favicon url={"../img/RT_Favicon.png"}/>
        {this.props.children}
        <NotificationContainer/>
      </div>
    );
  }
}

const mapDispatchToProps = (dispatch) => {

  return {
  	 loadUserFromToken: () => {
  	 	let token = sessionStorage.getItem('jwtToken');
  	 	if(!token || token === '') {//if there is no token, dont bother
        console.log("NO TOKEN IN SESSION");
  	 		return;
  	 	}

  	 //fetch user from token (if server deems it's valid token)
      dispatch(meFromToken(token))
        .then((response) => {
          if (response.payload.data && response.payload.data.success === true) {
          	//reset token (possibly new token that was regenerated by the server)
          	sessionStorage.setItem('jwtToken', response.payload.data.token);
            dispatch(meFromTokenSuccess(response.payload.data));
          } else {
          	sessionStorage.removeItem('jwtToken');//remove token from storage
            dispatch(meFromTokenFailure(response.payload.data));
          }
        });
  	 },

     resetMe: () =>{
     	sessionStorage.removeItem('jwtToken'); //remove token from storage
     	dispatch(resetToken());
     }
  }
}


export default connect(null, mapDispatchToProps)(App);
